{"version":3,"sources":["redux/actions.jsx","redux/reducer.jsx","redux/store.jsx","components/ContactList/ContactCard.jsx","components/ContactList/ContactList.jsx","components/ContactForm/ContactForm.jsx","components/Filter/Filter.jsx","App.js","index.js"],"names":["addContact","createAction","payload","name","number","id","uuidv4","deleteContact","filter","items","createReducer","state","contactFilter","_","combineReducers","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","contactsPersistConfig","key","storage","blacklist","store","configureStore","reducer","contacts","persistReducer","devTools","process","persistor","persistStore","ContactCard","onDelete","className","onClick","getVisibleContact","allContacts","contactsFilter","normalizedFilter","toLowerCase","includes","connect","dispatch","onDeleteContact","map","ContactForm","formReset","setState","handleSubmit","event","preventDefault","console","log","props","found","forEach","item","alert","onSubmit","handleInputChange","currentTarget","value","this","type","onChange","Component","target","App","ReactDOM","render","StrictMode","loading","document","getElementById"],"mappings":"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","file":"static/js/main.aa35f116.chunk.js","sourcesContent":["import { createAction } from '@reduxjs/toolkit';\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\nconst addContact = createAction('contacts/add', ({ name, number }) => ({\r\n  payload: {\r\n    name: name,\r\n    number: number,\r\n    id: uuidv4(),\r\n  },\r\n}));\r\n\r\n// const addContact = contacts => ({\r\n//   type: 'contacts/add',\r\n//   payload: {\r\n//     name: contacts.item.name,\r\n//     number: contacts.item.number,\r\n//     id: uuidv4(),\r\n//   },\r\n// });\r\n\r\nconst deleteContact = createAction('contacts/delete');\r\n\r\n// const deleteContact = id => ({\r\n//   type: types.DELETE,\r\n//   payload: id,\r\n// });\r\n\r\nconst filter = createAction('contacts/contactFilter');\r\n\r\n// const filter = value => ({\r\n//   type: 'contacts/filter',\r\n//   payload: value,\r\n// });\r\nexport { addContact, deleteContact, filter };\r\n","import { combineReducers } from 'redux';\r\nimport { addContact, deleteContact, filter } from './actions';\r\nimport { createReducer } from '@reduxjs/toolkit';\r\n\r\nconst initialState = {\r\n  items: [\r\n    { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\r\n    { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\r\n    { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\r\n    { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\r\n  ],\r\n};\r\n\r\nconst items = createReducer(initialState.items, {\r\n  [addContact]: (state, { payload }) => [...state, payload],\r\n  [deleteContact]: (state, { payload }) =>\r\n    state.filter(({ id }) => id !== payload),\r\n});\r\n\r\n// const items = (state = [], { type, payload }) => {\r\n//   switch (type) {\r\n//     case types.ADD:\r\n//       return [...state, payload];\r\n//     case types.DELETE:\r\n//       return state.filter(({ id }) => id !== payload);\r\n//     default:\r\n//       return state;\r\n//   }\r\n// };\r\n\r\nconst contactFilter = createReducer('', {\r\n  [filter]: (_, { payload }) => payload,\r\n});\r\n\r\n// const contactFilter = (state = '', { type, payload }) => {\r\n//   switch (type) {\r\n//     case [filter]:\r\n//       return payload;\r\n//     default:\r\n//       return state;\r\n//   }\r\n// };\r\n\r\nexport default combineReducers({\r\n  items,\r\n  contactFilter,\r\n});\r\n","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\r\nimport {\r\n  persistStore,\r\n  persistReducer,\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER,\r\n} from 'redux-persist';\r\nimport storage from 'redux-persist/lib/storage';\r\nimport logger from 'redux-logger';\r\nimport reducer from './reducer';\r\n\r\n// const rootReducer = {\r\n//   contacts: reducer,\r\n// };\r\n\r\nconst middleware = [\r\n  ...getDefaultMiddleware({\r\n    serializableCheck: {\r\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n    },\r\n  }),\r\n  logger,\r\n];\r\n\r\nconst contactsPersistConfig = {\r\n  key: 'contacts',\r\n  storage,\r\n  blacklist: ['filter'],\r\n};\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    contacts: persistReducer(contactsPersistConfig, reducer),\r\n  },\r\n  middleware,\r\n  devTools: process.env.NODE_ENV === 'development',\r\n});\r\n\r\nconst persistor = persistStore(store);\r\n\r\nexport { store, persistor };\r\n","import PropTypes from 'prop-types';\r\n\r\nconst ContactCard = ({ name, number, id, onDelete }) => {\r\n  return (\r\n    <li key={id}>\r\n      <span>{name}</span>\r\n      <span>{number}</span>\r\n      <button\r\n        className=\"deleteButton\"\r\n        onClick={() => {\r\n          onDelete(id);\r\n        }}\r\n      >\r\n        Delete\r\n      </button>\r\n    </li>\r\n  );\r\n};\r\n\r\nContactCard.propTypes = {\r\n  name: PropTypes.string.isRequired,\r\n  number: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default ContactCard;\r\n","import PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport ContactCard from './ContactCard';\r\nimport { deleteContact } from '../../redux/actions';\r\nimport './contactList.css';\r\n\r\nconst ContactList = ({ onDeleteContact, contacts }) => {\r\n  return (\r\n    <ul className=\"contactList\">\r\n      {contacts.map(({ name, number, id }) => {\r\n        return (\r\n          <ContactCard\r\n            name={name}\r\n            number={number}\r\n            id={id}\r\n            key={id}\r\n            onDelete={onDeleteContact}\r\n          />\r\n        );\r\n      })}\r\n    </ul>\r\n  );\r\n};\r\n\r\nconst getVisibleContact = (allContacts, contactsFilter) => {\r\n  const normalizedFilter = contactsFilter.toLowerCase();\r\n  return allContacts.filter(({ name }) =>\r\n    name.toLowerCase().includes(normalizedFilter),\r\n  );\r\n};\r\n\r\nContactList.propTypes = {\r\n  contacts: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      name: PropTypes.string.isRequired,\r\n      number: PropTypes.string.isRequired,\r\n      id: PropTypes.string.isRequired,\r\n    }),\r\n  ).isRequired,\r\n};\r\n\r\nconst mapStateToProps = ({ contacts: { items, contactFilter } }) => ({\r\n  contacts: getVisibleContact(items, contactFilter),\r\n});\r\n\r\n// const mapStateToProps = state => ({\r\n//   contacts: state.contacts.items,\r\n// });\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  onDeleteContact: id => dispatch(deleteContact(id)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);\r\n","import { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { addContact } from '../../redux/actions';\r\nimport './contactForm.css';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass ContactForm extends Component {\r\n  state = {\r\n    number: '',\r\n    name: '',\r\n  };\r\n\r\n  static propTypes = {\r\n    onSubmit: PropTypes.func.isRequired,\r\n  };\r\n\r\n  formReset = () => {\r\n    this.setState({ number: '', name: '' });\r\n  };\r\n\r\n  handleSubmit = event => {\r\n    event.preventDefault();\r\n    console.log(this.state.name);\r\n    console.log(this.props.contacts);\r\n    let found = false;\r\n    if (this.state.name === '') {\r\n      alert(`Please provide a name`);\r\n      return;\r\n    }\r\n    this.props.contacts.forEach(item => {\r\n      if (item.name === this.state.name) {\r\n        alert(`${this.state.name} is already in contacts`);\r\n        found = true;\r\n        return;\r\n      }\r\n    });\r\n    if (found) {\r\n      return;\r\n    }\r\n    this.props.onSubmit(this.state);\r\n    this.formReset();\r\n  };\r\n\r\n  handleInputChange = event => {\r\n    const { name, value } = event.currentTarget;\r\n    this.setState({ [name]: value });\r\n  };\r\n\r\n  render() {\r\n    const { number, name } = this.state;\r\n    return (\r\n      <div>\r\n        <form className=\"form\" onSubmit={this.handleSubmit}>\r\n          <label>\r\n            Name\r\n            <input\r\n              type=\"text\"\r\n              name=\"name\"\r\n              value={name}\r\n              onChange={this.handleInputChange}\r\n            />\r\n          </label>\r\n\r\n          <label>\r\n            Number\r\n            <input\r\n              type=\"text\"\r\n              name=\"number\"\r\n              value={number}\r\n              onChange={this.handleInputChange}\r\n            />\r\n          </label>\r\n\r\n          <button className=\"addBtn\">Add Contact</button>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  contacts: state.contacts.items,\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  onSubmit: (name, number) => dispatch(addContact(name, number)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactForm);\r\n","import './filter.css';\r\nimport { connect } from 'react-redux';\r\nimport { filter } from '../../redux/actions';\r\n\r\nconst Filter = ({ value, onChange }) => (\r\n  <label className=\"filterLabel\">\r\n    Find contacts by name\r\n    <input type=\"text\" name=\"filter\" value={value} onChange={onChange}></input>\r\n  </label>\r\n);\r\n\r\nconst mapStateToProps = state => ({\r\n  value: state.contacts.contactFilter,\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  onChange: event => dispatch(filter(event.target.value)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\r\n","import { Component } from 'react';\nimport ContactList from './components/ContactList/ContactList';\nimport ContactForm from './components/ContactForm/ContactForm';\nimport Filter from './components/Filter/Filter';\n\nclass App extends Component {\n  // state = {\n  //   contacts: [],\n  //   filter: '',\n  // };\n\n  // formSubmitHandl = ({ name, number }) => {\n  //   let newname = name;\n  //   let found = false;\n  //   this.state.contacts.forEach(({ name }) => {\n  //     if (newname.toLowerCase() === name.toLowerCase()) {\n  //       alert(`${name} is already in contacts`);\n  //       found = true;\n  //       return;\n  //     }\n  //     if (found) {\n  //       return;\n  //     }\n  //   });\n  //   if (found) {\n  //     return;\n  //   }\n  // this.setState(prevState => {\n  //   return {\n  //     contacts: [\n  //       ...prevState.contacts,\n  //       ...[{ name: newname, number: number, id: uuidv4() }],\n  //     ],\n  //   };\n  // });\n  // };\n\n  // getVisibleContact = () => {\n  //   const normalizedFilter = this.state.filter.toLowerCase();\n  //   return this.state.contacts.filter(contact =>\n  //     contact.name.toLowerCase().includes(normalizedFilter),\n  //   );\n  // };\n\n  // filterHandle = event => {\n  //   this.setState({ filter: event.currentTarget.value });\n  // };\n\n  // deleteContact = id => {\n  //   this.setState(prevState => {\n  //     return {\n  //       contacts: prevState.contacts.filter(contact => contact.id !== id),\n  //     };\n  //   });\n  // };\n\n  // componentDidMount() {\n  //   const contacts = localStorage.getItem('contacts');\n  //   const parsedContacts = JSON.parse(contacts);\n  //   if (parsedContacts) {\n  //     this.setState({ contacts: parsedContacts });\n  //   }\n  // }\n  // componentDidUpdate(prevProps, prevState) {\n  //   if (this.state.contacts !== prevState.contacts) {\n  //     localStorage.setItem('contacts', JSON.stringify(this.state.contacts));\n  //   }\n  // }\n\n  render() {\n    return (\n      <>\n        <h2>Phonebook</h2>\n        <ContactForm />\n        <h2>Contacts</h2>\n        <Filter />\n        <ContactList />\n      </>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport { store, persistor } from './redux/store';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <PersistGate loading={null} persistor={persistor}>\n        <BrowserRouter>\n          <App />\n        </BrowserRouter>\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}